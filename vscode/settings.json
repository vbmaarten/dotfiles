{
    "terminal.integrated.shell.osx": "/usr/local/bin/fish",
    "diffEditor.ignoreTrimWhitespace": false,
    "eslint.run": "onSave",
    "typescript.updateImportsOnFileMove.enabled": "never",
    "todo-tree.tree.showScanModeButton": false,
    "folderTemplates.structures": [
        {
            "name": "Coordinator",
            "customVariables": [],
            "structure": [
                {
                    "fileName": "constants.ts",
                    "template": "Coordinator-constants.ts"
                },
                {
                    "fileName": "context/graphql/index.ts",
                    "template": "Coordinator-context/graphql/index.ts"
                },
                {
                    "fileName": "context/graphql/mutations/exampleMutation.ts",
                    "template": "Coordinator-context/graphql/mutations/exampleMutation.ts"
                },
                {
                    "fileName": "context/graphql/mutations/index.ts",
                    "template": "Coordinator-context/graphql/mutations/index.ts"
                },
                {
                    "fileName": "context/graphql/queries/exampleQuery.ts",
                    "template": "Coordinator-context/graphql/queries/exampleQuery.ts"
                },
                {
                    "fileName": "context/graphql/queries/index.ts",
                    "template": "Coordinator-context/graphql/queries/index.ts"
                },
                {
                    "fileName": "context/index.ts",
                    "template": "Coordinator-context/index.ts"
                },
                {
                    "fileName": "coordinator/index.stories.tsx",
                    "template": "Coordinator-coordinator/index.stories.tsx"
                },
                {
                    "fileName": "coordinator/index.tsx",
                    "template": "Coordinator-coordinator/index.tsx"
                },
                {
                    "fileName": "coordinator/routeParams.ts",
                    "template": "Coordinator-coordinator/routeParams.ts"
                },
                {
                    "fileName": "locales/TranslationKeys.ts",
                    "template": "Coordinator-locales/TranslationKeys.ts"
                },
                {
                    "fileName": "locales/index.ts",
                    "template": "Coordinator-locales/index.ts"
                },
                {
                    "fileName": "locales/nl-NL/index.ts",
                    "template": "Coordinator-locales/nl-NL/index.ts"
                },
                {
                    "fileName": "package.json",
                    "template": "Coordinator-package.json"
                },
                {
                    "fileName": "screens/Overview/index.tsx",
                    "template": "Coordinator-screens/Overview/index.tsx"
                },
                {
                    "fileName": "screens/Overview/presentation.stories.tsx",
                    "template": "Coordinator-screens/Overview/presentation.stories.tsx"
                },
                {
                    "fileName": "screens/Overview/presentation.style.ts",
                    "template": "Coordinator-screens/Overview/presentation.style.ts"
                },
                {
                    "fileName": "screens/Overview/presentation.tsx",
                    "template": "Coordinator-screens/Overview/presentation.tsx"
                },
                {
                    "fileName": "screens/index.tsx",
                    "template": "Coordinator-screens/index.tsx"
                }
            ]
        },
        {
            "name": "Funnel",
            "customVariables": [],
            "structure": [
                {
                    "fileName": "coordinator/index.stories.tsx",
                    "template": "Funnel-coordinator/index.stories.tsx"
                },
                {
                    "fileName": "coordinator/index.tsx",
                    "template": "Funnel-coordinator/index.tsx"
                },
                {
                    "fileName": "coordinator/routeParams.ts",
                    "template": "Funnel-coordinator/routeParams.ts"
                },
                {
                    "fileName": "hooks/useSubmit.ts",
                    "template": "Funnel-hooks/useSubmit.ts"
                },
                {
                    "fileName": "index.tsx"
                },
                {
                    "fileName": "screens/Failure/index.tsx",
                    "template": "Funnel-screens/Failure/index.tsx"
                },
                {
                    "fileName": "screens/Initial/index.tsx",
                    "template": "Funnel-screens/Initial/index.tsx"
                },
                {
                    "fileName": "screens/Initial/presentation.stories.tsx"
                },
                {
                    "fileName": "screens/Initial/presentation.style.ts",
                    "template": "Funnel-screens/Initial/presentation.style.ts"
                },
                {
                    "fileName": "screens/Initial/presentation.tsx",
                    "template": "Funnel-screens/Initial/presentation.tsx"
                },
                {
                    "fileName": "screens/Success/index.style.ts",
                    "template": "Funnel-screens/Success/index.style.ts"
                },
                {
                    "fileName": "screens/Success/index.tsx",
                    "template": "Funnel-screens/Success/index.tsx"
                },
                {
                    "fileName": "screens/index.ts",
                    "template": "Funnel-screens/index.ts"
                },
                {
                    "fileName": "types/index.ts"
                }
            ]
        }
    ],
    "folderTemplates.fileTemplates": {
        "Coordinator-constants.ts": [
            "export enum <FTName | capitalize>Pages {",
            "  <FTName | uppercase>_OVERVIEW = '<FTName | uppercase>_OVERVIEW',",
            "}",
            ""
        ],
        "Coordinator-context/graphql/index.ts": [
            "import mutations from './mutations';",
            "import queries from './queries';",
            "",
            "export interface <FTName | capitalize>Calls {",
            "  mutations: typeof mutations;",
            "  queries: typeof queries;",
            "}",
            "",
            "const <FTName | lowercasefirstchar>Calls: <FTName | capitalize>Calls = {",
            "  mutations,",
            "  queries,",
            "};",
            "",
            "export default <FTName | lowercasefirstchar>Calls;",
            ""
        ],
        "Coordinator-context/graphql/mutations/exampleMutation.ts": [
            "import gql from 'graphql-tag';",
            "import {MutationHookOptions, useMutation} from '@apollo/client';",
            "",
            "export interface exampleVariables {",
            "  exampleDescription: string;",
            "}",
            "",
            "export interface exampleResponse {",
            "  exampleId: string;",
            "}",
            "",
            "export const exampleMutation = gql`",
            "  mutation exampleMutation($exampleDescription: String!) {",
            "    exampleMutation(exampleDescription: $exampleDescription) {",
            "      exampleId",
            "    }",
            "  }",
            "`;",
            "",
            "export const useExampleMutation = (",
            "  options?: MutationHookOptions<",
            "    {exampleMutation: exampleResponse},",
            "    exampleVariables",
            "  >,",
            ") =>",
            "  useMutation<{exampleMutation: exampleResponse}, exampleVariables>(",
            "    exampleMutation,",
            "    options,",
            "  );",
            "",
            "export default useExampleMutation;",
            ""
        ],
        "Coordinator-context/graphql/mutations/index.ts": [
            "import useExampleMutation from './exampleMutation';",
            "",
            "export default {",
            "  useExampleMutation,",
            "};",
            ""
        ],
        "Coordinator-context/graphql/queries/exampleQuery.ts": [
            "import gql from 'graphql-tag';",
            "import {useQuery, QueryHookOptions} from '@apollo/client';",
            "",
            "export interface ExampleQueryVariables {",
            "  exampleId: string;",
            "}",
            "",
            "export interface ExampleQueryResponse {",
            "  exampleDescription: string;",
            "}",
            "",
            "export const exampleQuery = gql`",
            "  query exampleQuery($exampleId: String!) {",
            "    exampleQuery(exampleId: $exampleId) {",
            "      exampleDescription",
            "    }",
            "  }",
            "`;",
            "",
            "export const useExampleQuery = (",
            "  options?:",
            "    | QueryHookOptions<",
            "        {exampleQuery: ExampleQueryResponse},",
            "        ExampleQueryVariables",
            "      >",
            "    | undefined,",
            ") =>",
            "  useQuery<{exampleQuery: ExampleQueryResponse}, ExampleQueryVariables>(",
            "    exampleQuery,",
            "    options,",
            "  );",
            ""
        ],
        "Coordinator-context/graphql/queries/index.ts": [
            "import {useExampleQuery} from './exampleQuery';",
            "",
            "export default {",
            "  useExampleQuery,",
            "};",
            ""
        ],
        "Coordinator-context/index.ts": [
            "import React from 'react';",
            "import {useFakeMutation, useFakeQuery} from '@nn/components/hooks/index';",
            "import {<FTName | capitalize>Calls} from './graphql';",
            "",
            "interface ContextType {",
            "  calls: <FTName | capitalize>Calls;",
            "}",
            "",
            "export const <FTName | capitalize>Context = React.createContext<ContextType>({",
            "  calls: {",
            "    mutations: {",
            "      useExampleMutation: useFakeMutation({",
            "        exampleMutation: {exampleId: '1'},",
            "      }),",
            "    },",
            "    queries: {",
            "      useExampleQuery: useFakeQuery(",
            "        {exampleQuery: {exampleDescription: 'Example Description'}},",
            "        {exampleId: '1'},",
            "      ),",
            "    },",
            "  },",
            "});",
            "",
            "export default <FTName | capitalize>Context;",
            ""
        ],
        "Coordinator-coordinator/index.stories.tsx": [
            "import React from 'react';",
            "import {<FTName | capitalize>Coordinator} from './';",
            "import {SBCategories} from '@nn/components/storyBookStructure';",
            "import {withNavigation} from '@nn/retail-app/navigator';",
            "import {storiesOf} from '@storybook/react-native';",
            "",
            "const Coordinator = withNavigation(<FTName | capitalize>Coordinator);",
            "",
            "storiesOf(SBCategories.<FTName | uppercase>, module).add('Complete Product', () => (",
            "  <Coordinator />",
            "));",
            ""
        ],
        "Coordinator-coordinator/index.tsx": [
            "import React from 'react';",
            "import {createNativeStackNavigator} from 'react-native-screens/native-stack';",
            "import {CoordinatorComponent, withNavigation} from '@nn/retail-app/navigator';",
            "import {<FTName | capitalize>Pages} from '@nn/<FTName | kebabcase>/constants';",
            "import {routeParams} from './routeParams';",
            "import <FTName | capitalize>Context from '../context';",
            "import {Overview} from '../screens';",
            "import <FTName | firstcharlowercase>Calls from '../context/graphql';",
            "import {SafeAreaViewColored} from '@nn-retailapp/matter';",
            "",
            "interface Props {}",
            "",
            "const StackNavigator = createNativeStackNavigator<routeParams>();",
            "",
            "export const <FTName | capitalize>Coordinator: CoordinatorComponent<{}> = ({}) => {",
            "  return (",
            "    <StackNavigator.Navigator",
            "      initialRouteName={<FTName | capitalize>Pages.<FTName | uppercase>_OVERVIEW}",
            "      screenOptions={{headerShown: false}}>",
            "      <StackNavigator.Screen name={<FTName | capitalize>Pages.<FTName | uppercase>_OVERVIEW}>",
            "        {() => <Overview />}",
            "      </StackNavigator.Screen>",
            "    </StackNavigator.Navigator>",
            "  );",
            "};",
            "",
            "const Coordinator = withNavigation(<FTName | capitalize>Coordinator);",
            "",
            "const <FTName | capitalize>CoordinatorWithNavigation: React.FC<Props> = ({}) => {",
            "  const {Provider} = <FTName | capitalize>Context;",
            "",
            "  return (",
            "    <SafeAreaViewColored>",
            "      <Provider",
            "        value={{",
            "          calls: <FTName | lowercasefirstchar>Calls,",
            "        }}>",
            "        <Coordinator />",
            "      </Provider>",
            "    </SafeAreaViewColored>",
            "  );",
            "};",
            "",
            "export default <FTName | capitalize>CoordinatorWithNavigation;",
            ""
        ],
        "Coordinator-coordinator/routeParams.ts": [
            "import {<FTName | capitalize>Pages} from '../constants';",
            "",
            "export type routeParams = {",
            "  [<FTName | capitalize>Pages.<FTName | uppercase>_OVERVIEW]: undefined;",
            "};",
            ""
        ],
        "Coordinator-locales/TranslationKeys.ts": [
            "export type TranslationKeys = {};",
            ""
        ],
        "Coordinator-locales/index.ts": [
            "import {TranslationKeys} from './TranslationKeys';",
            "import {supportedLocale} from '@nn/providers/i18n/config';",
            "import nlNl from './nl-NL';",
            "",
            "export const translations: {[key in supportedLocale]: TranslationKeys} = {",
            "  'nl-NL': nlNl,",
            "};",
            ""
        ],
        "Coordinator-locales/nl-NL/index.ts": [
            "import {TranslationKeys} from '../TranslationKeys';",
            "",
            "const translations: TranslationKeys = {};",
            "",
            "export default translations;",
            ""
        ],
        "Coordinator-package.json": [
            "{\"name\": \"@nn/<FTName | lowercasefirstchar>\"}"
        ],
        "Coordinator-screens/Overview/index.tsx": [
            "import React from 'react';",
            "import Overview from './presentation';",
            "",
            "interface Props {}",
            "",
            "const OverviewContainer: React.FC<Props> = ({}) => {",
            "  return <Overview />;",
            "};",
            "",
            "export default OverviewContainer;",
            ""
        ],
        "Coordinator-screens/Overview/presentation.stories.tsx": [
            "import React from 'react';",
            "import {storiesOf} from '@storybook/react-native';",
            "import Overview from './presentation';",
            "import {",
            "  SBCategories,",
            "  SBTitle,",
            "  SBAtomicTypes,",
            "} from '@nn/components/storyBookStructure';",
            "",
            "storiesOf(SBCategories.<FTName | uppercase>, module).add(",
            "  SBTitle(SBAtomicTypes.SCREEN, 'Overview'),",
            "  () => {",
            "    return <Overview />;",
            "  },",
            ");",
            ""
        ],
        "Coordinator-screens/Overview/presentation.style.ts": [
            "import {StyleSheet} from 'react-native';",
            "",
            "export default StyleSheet.create({});",
            ""
        ],
        "Coordinator-screens/Overview/presentation.tsx": [
            "import React from 'react';",
            "import {Text, View} from '@nn-retailapp/matter';",
            "",
            "interface Props {}",
            "",
            "const Overview: React.FC<Props> = ({}) => {",
            "  return (",
            "    <View>",
            "      <Text>Overview</Text>",
            "    </View>",
            "  );",
            "};",
            "",
            "export default Overview;",
            ""
        ],
        "Coordinator-screens/index.tsx": [
            "export {default as Overview} from './Overview';",
            ""
        ],
        "Funnel-coordinator/index.stories.tsx": [
            "import React from 'react';",
            "import WithdrawFunnelCoordinator from './';",
            "import {",
            "  SBAtomicTypes,",
            "  SBCategories,",
            "  SBTitle,",
            "} from '@nn/components/storyBookStructure';",
            "import {storiesOf} from '@storybook/react-native';",
            "import {Alert} from 'react-native';",
            "",
            "storiesOf(SBCategories.INVESTMENTS, module).add(",
            "  SBTitle(SBAtomicTypes.FUNNEL, 'Withdraw'),",
            "  () => <WithdrawFunnelCoordinator onClose={() => Alert.alert('Closed')} />,",
            ");",
            ""
        ],
        "Funnel-coordinator/index.tsx": [
            "import React from 'react';",
            "import {CoordinatorComponent, withNavigation} from '@nn/retail-app/navigator';",
            "import {createNativeStackNavigator} from 'react-native-screens/native-stack';",
            "import {routeParams} from './routeParams';",
            "import {Initial, Failure, Success} from '../screens';",
            "import {useHeaderConfig} from '@nn/components/hooks/';",
            "import {FunnelHeader} from '@nn-retailapp/matter';",
            "import {WithdrawFunnelPages} from '@nn/investments/constants';",
            "import useSubmit from '../hooks/useSubmit';",
            "",
            "interface Props {",
            "  onClose: () => void;",
            "}",
            "",
            "const {Navigator, Screen} = createNativeStackNavigator<routeParams>();",
            "",
            "export const WithdrawFunnelCoordinator: CoordinatorComponent<Props> = ({",
            "  navigation,",
            "  onClose,",
            "}) => {",
            "  const [headerConfig, , headerListener] = useHeaderConfig({",
            "    showBack: false,",
            "    title: 'withdrawFunnel',",
            "    fullscreen: false,",
            "  });",
            "",
            "  const {isMutationInProgress, onSubmit} = useSubmit();",
            "",
            "  return (",
            "    <>",
            "      {!headerConfig.fullscreen && (",
            "        <FunnelHeader",
            "          onBack={() => navigation.goBack()}",
            "          title={headerConfig.title}",
            "          showBack={headerConfig.showBack}",
            "          showCloseWarning={headerConfig.showCloseWarning}",
            "          onTopRight={onClose}",
            "        />",
            "      )}",
            "      <Navigator",
            "        initialRouteName={WithdrawFunnelPages.INITIAL}",
            "        screenOptions={{headerShown: false}}>",
            "        <Screen",
            "          name={WithdrawFunnelPages.INITIAL}",
            "          listeners={headerListener(() => ({",
            "            fullscreen: false,",
            "            showBack: false,",
            "            title: 'Initial',",
            "            showCloseWarning: false,",
            "          }))}>",
            "          {() => (",
            "            <Initial onSubmitData={onSubmit} loading={isMutationInProgress} />",
            "          )}",
            "        </Screen>",
            "        <Screen",
            "          name={WithdrawFunnelPages.SUCCESS}",
            "          listeners={headerListener(() => ({",
            "            fullscreen: false,",
            "            showBack: false,",
            "            title: 'Success',",
            "            showCloseWarning: false,",
            "          }))}>",
            "          {() => <Success onClose={onClose} />}",
            "        </Screen>",
            "        <Screen",
            "          name={WithdrawFunnelPages.FAILURE}",
            "          listeners={headerListener(() => ({",
            "            fullscreen: false,",
            "            showBack: false,",
            "            title: 'Failure',",
            "            showCloseWarning: true,",
            "          }))}>",
            "          {({route}) => <Failure onClose={onClose} {...route.params} />}",
            "        </Screen>",
            "      </Navigator>",
            "    </>",
            "  );",
            "};",
            "",
            "export default withNavigation(WithdrawFunnelCoordinator);",
            ""
        ],
        "Funnel-coordinator/routeParams.ts": [
            "import {WithdrawFunnelPages} from '@nn/retail-app/investments/constants';",
            "",
            "export type routeParams = {",
            "  [WithdrawFunnelPages.INITIAL]: undefined;",
            "  [WithdrawFunnelPages.SUCCESS]: undefined;",
            "  [WithdrawFunnelPages.FAILURE]: {",
            "    title: string;",
            "    message: string;",
            "  };",
            "};",
            ""
        ],
        "Funnel-hooks/useSubmit.ts": [
            "import {useTypedTranslation} from '@nn/i18n/hooks/useTypedTranslation';",
            "import {WithdrawFunnelPages} from '@nn/investments/constants';",
            "import {useNetInfo} from '@react-native-community/netinfo';",
            "import {useNavigation} from '@react-navigation/native';",
            "import {useCallback, useMemo, useState} from 'react';",
            "import {NativeStackNavigationProp} from 'react-native-screens/lib/typescript';",
            "import {routeParams} from '../coordinator/routeParams';",
            "",
            "const onSubmitStub = () =>",
            "  new Promise<{data: {submit: {status: {ok: boolean}}}; errors?: any}>((res) =>",
            "    setTimeout(",
            "      () =>",
            "        res({",
            "          data: {submit: {status: {ok: true}}},",
            "          errors: Math.random() > 0.5 ? ['error'] : undefined,",
            "        }),",
            "      2000,",
            "    ),",
            "  );",
            "",
            "const useSubmit = () => {",
            "  const navigation = useNavigation<NativeStackNavigationProp<routeParams>>();",
            "  const {t: translate} = useTypedTranslation('common');",
            "",
            "  const [isMutationInProgress, setIsMutationInProgresss] = useState(false);",
            "",
            "  const {isConnected} = useNetInfo();",
            "",
            "  const errorTitle = useMemo(",
            "    () =>",
            "      isConnected",
            "        ? translate('errorMessages', 'somethingWentWrongWithOurServices')()",
            "        : translate('errorMessages', 'youHaveNoConnection')(),",
            "    [isConnected, translate],",
            "  );",
            "",
            "  const errorMessage = useMemo(",
            "    () =>",
            "      isConnected",
            "        ? translate('errorMessages', 'weCanNotSaveYourData')()",
            "        : translate('errorMessages', 'weDidntFindAnInternetConnection')(),",
            "    [isConnected, translate],",
            "  );",
            "",
            "  const onSubmit = useCallback(async () => {",
            "    setIsMutationInProgresss(true);",
            "    try {",
            "      // Execute mutation",
            "      const {data, errors} = await onSubmitStub();",
            "",
            "      console.log(data, errors);",
            "",
            "      setIsMutationInProgresss(false);",
            "      if ((errors && errors.length > 0) || !data || !data.submit.status.ok) {",
            "        navigation.navigate(WithdrawFunnelPages.FAILURE, {",
            "          message: errorMessage,",
            "          title: errorTitle,",
            "        });",
            "",
            "        return;",
            "      }",
            "",
            "      navigation.navigate(WithdrawFunnelPages.SUCCESS);",
            "    } catch (e) {",
            "      setIsMutationInProgresss(false);",
            "      navigation.navigate(WithdrawFunnelPages.FAILURE, {",
            "        message: errorMessage,",
            "        title: errorTitle,",
            "      });",
            "    }",
            "  }, [errorMessage, errorTitle, navigation]);",
            "",
            "  return {onSubmit, isMutationInProgress};",
            "};",
            "",
            "export default useSubmit;",
            ""
        ],
        "Funnel-screens/Failure/index.tsx": [
            "import React, {ComponentProps, useCallback, useMemo} from 'react';",
            "import {Failure} from '@nn/components/pages';",
            "import {NNButton} from '@nn-retailapp/matter';",
            "import {useTypedTranslation} from '@nn/i18n/hooks/useTypedTranslation';",
            "import {useNavigation} from '@react-navigation/native';",
            "import {NativeStackNavigationProp} from 'react-native-screens/lib/typescript';",
            "import {routeParams} from '../../coordinator/routeParams';",
            "",
            "interface Props {",
            "  title: string;",
            "  message: string;",
            "  onClose: () => void;",
            "}",
            "",
            "const FailureScreen: React.FC<Props> = ({title, message, onClose}) => {",
            "  const {t: translate} = useTypedTranslation('common');",
            "",
            "  const navigation = useNavigation<NativeStackNavigationProp<routeParams>>();",
            "",
            "  const onRetry = useCallback(() => navigation.goBack(), [navigation]);",
            "",
            "  const buttons = useMemo<ComponentProps<typeof NNButton>[]>(",
            "    () => [",
            "      {",
            "        label: translate('backToOverview')(),",
            "        onPress: onClose,",
            "      },",
            "      {",
            "        label: translate('retry')(),",
            "        onPress: onRetry,",
            "      },",
            "    ],",
            "    [onClose, onRetry, translate],",
            "  );",
            "",
            "  return <Failure title={title} bodyText={message} buttonList={buttons} />;",
            "};",
            "",
            "export default FailureScreen;",
            ""
        ],
        "Funnel-screens/Initial/index.tsx": [
            "import React from 'react';",
            "import Initial from './presentation';",
            "",
            "interface Props {",
            "  initialValue?: string;",
            "  onSubmitData: (data: string) => void;",
            "  loading?: boolean;",
            "}",
            "",
            "const InitialScreen: React.FC<Props> = ({",
            "  onSubmitData,",
            "  initialValue,",
            "  loading,",
            "}) => {",
            "  return (",
            "    <Initial",
            "      onSubmitData={onSubmitData}",
            "      initialValue={initialValue}",
            "      loading={loading}",
            "    />",
            "  );",
            "};",
            "",
            "export default InitialScreen;",
            ""
        ],
        "Funnel-screens/Initial/presentation.style.ts": [
            "import {StyleSheet} from 'react-native';",
            "",
            "export default StyleSheet.create({});",
            ""
        ],
        "Funnel-screens/Initial/presentation.tsx": [
            "import React, {useCallback, useMemo, useState} from 'react';",
            "import {IconNames, ButtonList} from '@nn-retailapp/matter';",
            "import {FunnelScreenWithFooter} from '@nn/components/pages';",
            "import {ButtonProps} from '@nn-retailapp/matter/src/atoms/NNButton';",
            "import {FunnelInput} from '@nn/components/molecules';",
            "",
            "interface Props {",
            "  initialValue?: string;",
            "  onSubmitData: (data: string) => void;",
            "  loading?: boolean;",
            "}",
            "",
            "const InitialScreen: React.FC<Props> = ({",
            "  onSubmitData,",
            "  initialValue,",
            "  loading,",
            "}) => {",
            "  const [data, setData] = useState(initialValue || '');",
            "",
            "  const submitData = useCallback(() => {",
            "    onSubmitData(data);",
            "  }, [data, onSubmitData]);",
            "",
            "  const buttons = useMemo<ButtonProps[]>(",
            "    () => [",
            "      {label: 'Submit', onPress: submitData, iconName: IconNames.ArrowRight},",
            "    ],",
            "    [submitData],",
            "  );",
            "",
            "  return (",
            "    <FunnelScreenWithFooter",
            "      footer={<ButtonList buttons={buttons} />}",
            "      footerLoading={loading}>",
            "      <FunnelInput initialValue={initialValue} onChangeText={setData} />",
            "    </FunnelScreenWithFooter>",
            "  );",
            "};",
            "",
            "export default InitialScreen;",
            ""
        ],
        "Funnel-screens/Success/index.style.ts": [
            "import {StyleSheet} from 'react-native';",
            "",
            "export default StyleSheet.create({",
            "  imageContainer: {",
            "    width: 235,",
            "    height: 330,",
            "    paddingTop: 20,",
            "  },",
            "});",
            ""
        ],
        "Funnel-screens/Success/index.tsx": [
            "import React, {ComponentProps} from 'react';",
            "import {Success} from '@nn/components/pages';",
            "import {SuccessPills} from '@nn/assets/images';",
            "import {NNButton} from '@nn-retailapp/matter';",
            "import style from './index.style';",
            "",
            "interface Props {",
            "  onClose: () => void;",
            "}",
            "",
            "const SuccessScreen: React.FC<Props> = ({onClose}) => {",
            "  const buttons: ComponentProps<typeof NNButton>[] = [",
            "    {",
            "      label: 'Back',",
            "      onPress: onClose,",
            "    },",
            "  ];",
            "",
            "  return (",
            "    <Success",
            "      image={SuccessPills}",
            "      bodyText={'Success'}",
            "      buttonList={buttons}",
            "      imageContainerStyle={style.imageContainer}",
            "    />",
            "  );",
            "};",
            "",
            "export default SuccessScreen;",
            ""
        ],
        "Funnel-screens/index.ts": [
            "export {default as Failure} from './Failure';",
            "export {default as Success} from './Success';",
            "export {default as Initial} from './Initial';",
            ""
        ]
    },
    "editor.suggestSelection": "first",
    "editor.codeActionsOnSave": {
        "source.fixAll.eslint": true
    },
    "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
    "terminal.integrated.automationShell.osx": "",
    "aceJump.placeholder.color": "#FF0000",
    "aceJump.placeholder.backgroundColor": "#FFFFFF",
    "aceJump.placeholder.upperCase": true,
    "liveshare.authenticationProvider": "Microsoft",
    "editor.tabCompletion": "on",
    "vscode-neovim.neovimExecutablePaths.darwin": "/Users/maartenvanbeek/Downloads/nvim-osx64/bin/nvim",
    "editor.lineNumbers": "relative",
    "editor.smoothScrolling": true,
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[javascript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "todo-tree.general.tags": [
        "BUG",
        "HACK",
        "FIXME",
        "TODO",
        "XXX",
        "[ ]",
        "[x]"
    ],
    "todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",
    "window.zoomLevel": 1
}