{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"NNComponent": {
		"prefix": "nncomponent",
		"body": ["import React from 'react';",
			"import { View } from '@nn-retailapp/matter';",
			"",
			"interface Props {}",
			"",
			"const $1: React.FC<Props> = () => {",
			"  return <View />;",
			"};",
			"",
			"export default $1;",
			""
			]
	},
	"NNStory": {
		"prefix": "nnstory",
		"body": ["import React from 'react';",
			"import {storiesOf} from '@storybook/react-native';",
			"import { View } from '@nn-retailapp/matter';",
			"import {withKnobs} from '@storybook/addon-knobs';",
			"import {",
			"  SBCategories,",
			"  SBTitle,",
			"  SBAtomicTypes",
			"} from '@nn/components/storyBookStructure';",
			"",
			"storiesOf(SBCategories$1, module)",
			"  .addDecorator(withKnobs)",
			"  .add(SBTitle(SBAtomicTypes$2, '$3'), () => {",
			"    return <View />;",
			"  });",
			""
			]
	},
	"NNStyle": {
		"prefix": "nnstyle",
		"body": ["import {StyleSheet} from 'react-native';",
			"",
			"export default StyleSheet.create({});",
			"",
			]
	},
	"NNValidator": {
		"prefix": "nnvalidator",
		"body": ["import {Validator, validateObject} from '@nn/types/validators';",
			"",
			"export const validator: Validator<any> = (data) => {",
			"  const validObject = validateObject(data);",
			"  if (validObject.error) {",
			"    return {error: true};",
			"  }",
			"",
			"  const dataObject = validObject.data;",
			"  console.log(dataObject);",
			"  return {error: true};",
			"};",
			""
			]
	},
	"Default test prop constants": {
		"prefix": "dtpc",
		"body": [
			"export const getDefaultProps = (): ComponentProps<",
			"  typeof $1",
			"> => {",
			"  return {",
			"  };",
			"};",
			"",
			"export const getSnapshotProps: () => ComponentProps<",
			"  typeof $1",
			">[] = () => {",
			"  const props = getDefaultProps();",
			"",
			"  return [{...props}];",
			"};",
		]
	},
	"Default test render": {
		"prefix": "dtr",
		"body":[
		 "const props = getDefaultProps();",
		 "",
		 "const {$2} = render(",
  		 "  <$1 {...props} />,",
   		 ");",
		 "$0"
		]
	},
	"Default test get by text": {
		"prefix": "dtgbt",
		"body": "getByText"
	},
	"Default test get by A11 label": {
		"prefix": "dtgba",
		"body": "getByA11yLabel"
	},
	"Default test todo": {
		"prefix": "dtdo",
		"body": "it.todo(\"$1\")$0"
	},
	"Default test screen copy": {
		"prefix": "dtsc",
		"body": [
			"export const SCREEN_COPY = {",
			"  $1",
			"}",
		]
	},
	"Default test snapshot test":{
		"prefix": "dtst",
		"body": [
			"test.each(getSnapshotProps())(",
			"  'Matches the snapshot of the $1 $0',",
			"  (props) => {",
			"    const {toJSON} = render(<$1 {...props} />);",
			"",
			"    expect(toJSON()).toMatchSnapshot();",
			"  },",
			");",
		]
	},
	"Default test mock constant": {
		"prefix": "dtmc",
		"body": [
			"export const MOCKED_NOW_MOMENT = '2020-02-10T12:00:00+0000';"
		]
	},
	"Jest function mock": {
		"prefix": "jfn",
		"body": [
			"jest.fn()",
		]
	}, 
	"Currency": {
		"prefix": "cny",
		"body": [
    		"{",
    		"  currency: Currency.EURO,",
    		"  value: $1,",
    		"}$0",
		]
	},
	"Default test saving goal":{
		"prefix": "dtsg",
		"body":[
			"export const savingGoal: SavingGoal = {",
				"id: 120,",
				"description: 'SavingGoalDescription',",
				"balance: {currency: Currency.EURO, value: 150},",
				"icon: SavingGoalIcons.BUFFER,",
				"targetAmount: {currency: Currency.EURO, value: 2000},",
				"progress: 7.5,",
				"targetDate: '2020-06-24',",
			"};",
		]
	},
	"Default test iban":{
		"prefix": "dtib",
		"body": "'NL55TEST5555555555'"
	},
	"Import react":{
		"prefix": "impr",
		"body": "import React from 'react';"
	}
	
}