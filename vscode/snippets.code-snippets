{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// in file 'Code/User/snippets/javascript.json'
  "Interface": {
    "prefix": ["interface"],
    "body": ["interface $1 {", "\t$0", "}"],
    "description": "A for loop."
  },
  "Console Log": {
	  "prefix": ["clg"],
	  "body": ["console.log($0);"]
  },
  "Console Log Json": {
	  "prefix": ["clj"],
	  "body": ["console.log(JSON.stringify($0, null, 2));"]
  },
  "useMemo": {
	  "prefix": ["um"],
	  "body": ["const $1 = useMemo(() => {$0}, [])"]
  },
  "useCallback": {
	  "prefix": ["uc"],
	  "body": ["const $1 = useCallback(() => {$0}, [])"]
  },
  "useEffect": {
	  "prefix": ["uf"],
	  "body": ["useEffect(() => {$0}, [])"]
  },
  "Enum entry": {
	  "prefix": ["ene"],
	  "body": ["$1 = '$1'"]
  },
  "const": {
	  "prefix": ["c"],
	  "body": ["const"]
  },
  "style": {
	  "prefix": ["ps"],
	  "body": ["style={{$0}}"]
  },
  "Same name property": {
	  "prefix": ["snp"],
	  "body": ["$1 = {$1}"]
  },
  "export": {
	  "prefix": ["ex"],
	  "body": ["export"]
  }, 
  "default": {
	  "prefix": ["df"],
	  "body": ["default"]
  },
  "function": {
	  "prefix": ["fn"],
	  "body": ["function"]
  },
  "arrow function": {
	  "prefix": ["af"],
	  "body": ["($1) => {$0}"]
  },
  "async arrow function": {
	  "prefix": ["aaf"],
	  "body": ["async ($1) => {$0}"]
  },
}